Dear all
Dose any body know how to use vtkImageReslice to get oblique slice with
arbitrarily position and direction? I need to set the position and direction
for reslice, and get the slice data, any good idea?

Tao Wang
Thanks all




--
View this message in context: http://vtk.1045678.n5.nabble.com/How-to-use-vtkImageReslice-to-get-oblique-slice-with-arbitrarily-position-and-direction-tp5741711.html
Sent from the VTK - Users mailing list archive at Nabble.com.
_______________________________________________
Powered by www.kitware.com

Visit other Kitware open-source projects at http://www.kitware.com/opensource/opensource.html

Please keep messages on-topic and check the VTK FAQ at: http://www.vtk.org/Wiki/VTK_FAQ

Search the list archives at: http://markmail.org/search/?q=vtkusers

Follow this link to subscribe/unsubscribe:
http://public.kitware.com/mailman/listinfo/vtkusers

Alessandro Volz alessandro.volz@gmail.com via vtk.org 
15:48 (2 hours ago)

to wangtaoiz, vtkusers 
Hi,

I just spent a few days figuring out how to do just that :)

In my case, the input is a three-dimensional floats blob (a 3D volume) and the output is a two-dimensional floats blob (a 2D slice that I later draw).

1- map your input data to VTK: I'm using an instance of vtkImageImport, but there are many alternatives depending on your input data
2- set up a vtkImageReslice
3- Update() the vtkImageReslice and get the output vtkImageData through GetOutput()

The tricky part is setting up the vtkImageReslice:

2a- connect the vtkImageImport output to the vtkImageReslice input
2b- set up the output (scalar type, dimensionality, extent, origin, interpolation mode)
2c- define the reslice axes and origin

Your question was mainly on how to define the position and direction of the reslice, so more details on 2c: I ended up setting these on my reslices is by using the vtkImageReslice SetResliceAxes method, basically through an array of 16 values: { xdir.x, ydir.x, zdir.x, origin.x, xdir.y, ydir.y, zdir.y, origin.y, xdir.z, ydir.z, zdir.z, origin.z, 0, 0, 0, 1 }

My Obj-C++ code could be useful: https://github.com/spalte/Natural-Image-Building-Blocks/blob/master/NIBuildingBlocks/NIVTKObliqueSliceOperation.mm

Best,

========================================================================================
And, I got oblique plane images of voxel data at last. 
My example of c++ is as follows. 

----------------------------------------------------------- 

int main(int argc, char *argv[]) 
{ 
        if (argc < 2) { 
                cout << "Usage: " << argv[0] << " DATADIR/prefix" << endl; 
                return EXIT_FAILURE; 
        } 

        vtkSmartPointer<vtkRenderer> aRenderer = vtkSmartPointer<vtkRenderer>::New(); 
        vtkSmartPointer<vtkRenderWindow> renWin = vtkSmartPointer<vtkRenderWindow>::New(); 
        renWin->AddRenderer(aRenderer); 
        vtkSmartPointer<vtkRenderWindowInteractor> iren = vtkSmartPointer<vtkRenderWindowInteractor>::New(); 
        iren->SetRenderWindow(renWin); 

        aRenderer->SetBackground(.2, .3, .4); 
        renWin->SetSize(640, 480); 

        // vtkVolume16Reader Setting 
        vtkSmartPointer<vtkVolume16Reader> v16 = vtkSmartPointer<vtkVolume16Reader>::New(); 
        v16->SetDataDimensions (426,426); 
        v16->SetImageRange (1,318); 
        v16->SetDataByteOrderToLittleEndian(); 
        v16->SetFilePrefix (argv[1]); 
        v16->SetDataSpacing (1.0, 1.0, 1.0); 
        v16->Update(); 

        // outline provides context around the data. 
        vtkSmartPointer<vtkOutlineFilter> outlineData =	vtkSmartPointer<vtkOutlineFilter>::New(); 
        outlineData->SetInputConnection(v16->GetOutputPort()); 
        outlineData->Update(); 

        vtkSmartPointer<vtkPolyDataMapper> mapOutline =	vtkSmartPointer<vtkPolyDataMapper>::New(); 
        mapOutline->SetInputConnection(outlineData->GetOutputPort()); 

        vtkSmartPointer<vtkActor> outline =	vtkSmartPointer<vtkActor>::New(); 
        outline->SetMapper(mapOutline); 
        outline->GetProperty()->SetColor(0,0,0); 

        // Setting of vtkImageResliceMapper 
        vtkSmartPointer<vtkImageResliceMapper> im = vtkSmartPointer<vtkImageResliceMapper>::New(); 
        im->SetInputConnection(v16->GetOutputPort()); 
        im->SliceFacesCameraOn(); 
        im->SliceAtFocalPointOn(); 
        im->BorderOff(); 

        // Setting of vtkImageProperty 
        vtkSmartPointer<vtkImageProperty> ip = vtkSmartPointer<vtkImageProperty>::New(); 
        ip->SetColorWindow(2000); 
        ip->SetColorLevel(1000); 
        ip->SetAmbient(0.0); 
        ip->SetDiffuse(1.0); 
        ip->SetOpacity(1.0); 
        ip->SetInterpolationTypeToLinear(); 

        // Try of vtkImageSlice 
        vtkSmartPointer<vtkImageSlice> imageSlice =	vtkSmartPointer<vtkImageSlice>::New(); 
        vtkSmartPointer<vtkInteractorStyleImage > styleImage = vtkSmartPointer<vtkInteractorStyleImage >::New(); 

        imageSlice->SetMapper(im); 
        imageSlice->SetProperty(ip); 

        styleImage->SetInteractionModeToImage3D(); 
        iren->SetInteractorStyle(styleImage); 
        renWin->SetInteractor(iren); 

        // Actors are added to the renderer. 
        aRenderer->AddActor(outline); 
        aRenderer->AddViewProp(imageSlice); 

        // camera Setting 
        vtkSmartPointer<vtkCamera> aCamera = vtkSmartPointer<vtkCamera>::New(); 
        aCamera->SetViewUp (0, 0, -1); 
        aCamera->SetPosition (0, 1, 0); 
        aCamera->SetFocalPoint (0, 0, 0); 
        aCamera->ComputeViewPlaneNormal(); 
        aCamera->Azimuth(30.0); 
        aCamera->Elevation(30.0); 
        aCamera->ParallelProjectionOn(); 
        aRenderer->SetActiveCamera(aCamera); 


        renWin->Render(); 
        aRenderer->ResetCamera(); 
        aRenderer->ResetCameraClippingRange(); 

        // interact with data 
        iren->Initialize(); 
        iren->Start(); 

        return EXIT_SUCCESS; 
} 


